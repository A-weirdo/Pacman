#pragma warning(disable : 4996)

#include <iostream>
#include <stdlib.h>
#include <cmath>
#include <ctime>
#include <conio.h>
#include "Header.h"
#include "ghost_moves.cpp"
#include "pacman_moves.cpp"
#include "func.cpp"



char map1[20][20] = {                                                                         //taarif map hay game_continue
       {'w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w'}
       ,{'w',' ',' ',' ','w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ',' ','Y','w'}
       ,{'w',' ',' ',' ','w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ',' ',' ','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'}
       ,{'w','w','w',' ',' ',' ',' ',' ','w','w','w','w',' ',' ',' ',' ',' ','w','w','w'}
       ,{'w','Y',' ',' ',' ',' ',' ',' ',' ',' ','Y',' ',' ',' ',' ',' ',' ',' ',' ','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ','w','w','w','w',' ',' ',' ',' ','Y',' ',' ','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'}
       ,{'w','w',' ',' ',' ',' ',' ',' ',' ','w','w',' ',' ',' ',' ',' ',' ',' ','w','w'}
       ,{'w','w',' ',' ',' ',' ',' ',' ',' ','w','w',' ',' ',' ',' ',' ',' ',' ','w','w'}
       ,{'w','Y',' ',' ',' ',' ',' ',' ',' ',' ','Y',' ',' ',' ',' ',' ',' ',' ',' ','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ','w','w','w','w',' ',' ',' ',' ',' ',' ','Y','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ',' ','Y',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'}
       ,{'w','w','w',' ',' ',' ',' ',' ','w','w','w','w',' ',' ',' ',' ',' ','w','w','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'}
       ,{'w',' ',' ',' ','w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ',' ',' ','w'}
       ,{'w','Y',' ',' ','w',' ',' ',' ',' ',' ',' ',' ','Y',' ',' ','w',' ',' ',' ','w'}
       ,{'w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w'} };
char map2[20][20] = {
       {'w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ','Y','w','w',' ',' ',' ',' ',' ','Y',' ',' ','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ',' ','w','w',' ',' ',' ',' ',' ',' ',' ',' ','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'}
       ,{'w',' ',' ','w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ',' ','w'}
       ,{'w','w','w','w',' ',' ','w','w','w',' ',' ','w','w','w',' ',' ','w','w','w','w'}
       ,{'w',' ',' ',' ',' ',' ','w',' ',' ',' ',' ',' ',' ','w',' ',' ',' ',' ',' ','w'}
       ,{'w',' ',' ',' ','Y',' ','w',' ',' ',' ',' ',' ',' ','w',' ',' ',' ',' ',' ','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ',' ','w','w',' ',' ',' ',' ',' ',' ',' ','Y','w'}
       ,{'w','w','w',' ',' ',' ',' ',' ',' ','w','w',' ',' ',' ',' ',' ',' ','w','w','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'}
       ,{'w',' ',' ',' ',' ','Y','w',' ',' ','Y',' ',' ',' ','w',' ',' ',' ',' ',' ','w'}
       ,{'w',' ',' ',' ',' ',' ','w',' ',' ',' ',' ',' ',' ','w',' ',' ',' ',' ',' ','w'}
       ,{'w','Y',' ',' ',' ',' ','w','w','w',' ',' ','w','w','w',' ',' ',' ',' ',' ','w'}
       ,{'w','w','w','w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w','w','w','w'}
       ,{'w',' ','Y','w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ',' ','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ',' ','w','w',' ',' ',' ',' ',' ',' ',' ',' ','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ',' ','w','w','Y',' ',' ',' ',' ',' ',' ','Y','w'}
       ,{'w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w'} };
char map3[20][20] = {
       {'w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w'}
       ,{'w',' ',' ',' ',' ',' ',' ','w',' ',' ',' ',' ','w',' ',' ',' ',' ',' ',' ','w'}
       ,{'w',' ','w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ','w'}
       ,{'w',' ',' ','w',' ','w',' ',' ',' ',' ',' ',' ',' ',' ','w','Y','w',' ',' ','w'}
       ,{'w',' ',' ','Y','w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ',' ',' ','w'}
       ,{'w',' ',' ','w',' ',' ',' ','Y',' ',' ',' ',' ',' ',' ',' ',' ','w',' ',' ','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'}
       ,{'w','w',' ',' ',' ',' ',' ',' ','w',' ',' ','w',' ',' ',' ',' ',' ',' ','w','w'}
       ,{'w',' ',' ',' ',' ',' ',' ','w','w',' ',' ','w','w',' ',' ',' ',' ',' ',' ','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ',' ','w','w',' ',' ',' ',' ',' ','Y',' ',' ','w'}
       ,{'w',' ',' ',' ','Y',' ',' ',' ',' ','w','w','Y',' ',' ',' ',' ',' ',' ',' ','w'}
       ,{'w',' ',' ',' ',' ',' ',' ','w','w',' ',' ','w','w',' ',' ',' ',' ',' ',' ','w'}
       ,{'w','w',' ',' ',' ',' ',' ',' ','w',' ',' ','w',' ',' ',' ',' ',' ',' ','w','w'}
       ,{'w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'}
       ,{'w',' ',' ','w',' ',' ','Y',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ',' ','w'}
       ,{'w',' ',' ',' ','w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ',' ',' ','w'}
       ,{'w',' ',' ','w',' ','w',' ',' ',' ',' ',' ',' ',' ',' ','w',' ','w',' ',' ','w'}
       ,{'w',' ','w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ','w'}
       ,{'w','Y',' ',' ',' ',' ',' ','w',' ','Y',' ',' ','w',' ',' ',' ',' ',' ','Y','w'}
       ,{'w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w'} };
char bord[20][22] = {                                                                                             //map hay hengam bord va bakht
       {'<','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','>'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|','*',' ',' ',' ','*',' ',' ',' ','*',' ',' ','*',' ',' ','*',' ',' ',' ','*',' ','|'}
       ,{'|','*',' ',' ','*',' ','*',' ',' ','*',' ',' ','*',' ',' ','*','*',' ',' ','*',' ','|'}
       ,{'|','*',' ','*',' ',' ',' ','*',' ','*',' ',' ','*',' ',' ','*',' ','*',' ','*',' ','|'}
       ,{'|','*','*',' ',' ',' ',' ',' ','*','*',' ',' ','*',' ',' ','*',' ',' ','*','*',' ','|'}
       ,{'|','*',' ',' ',' ',' ',' ',' ',' ','*',' ',' ','*',' ',' ','*',' ',' ',' ','*',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|','M','.','M',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'<','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','>'} };
char bakht[20][22] = {
       {'<','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','>'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','*','*',' ',' ','*','*','*',' ','|'}
       ,{'|',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ','*',' ',' ','|'}
       ,{'|',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ','*',' ',' ','|'}
       ,{'|',' ','*',' ',' ',' ',' ','*','*','*',' ',' ','*','*','*',' ',' ',' ','*',' ',' ','|'}
       ,{'|',' ','*',' ',' ',' ',' ','*',' ','*',' ',' ',' ',' ','*',' ',' ',' ','*',' ',' ','|'}
       ,{'|',' ','*',' ',' ',' ',' ','*',' ','*',' ',' ',' ',' ','*',' ',' ',' ','*',' ',' ','|'}
       ,{'|',' ','*','*','*',' ',' ','*','*','*',' ',' ','*','*','*',' ',' ',' ','*',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'|','M','.','M',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'}
       ,{'<','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','>'} };


using namespace std;


int main()
{
 
    int score = 0, q, game_continue = 0, temp, selected_map, mode;
    int t = 0;

    char x;


    int m = 20;
    char** map = (char**)malloc(m * sizeof(char*));
    for (int r = 0; r < m; r++) {
        map[r] = (char*)malloc(m * sizeof(char));
    }
   
   m = 5;
    int n = 2;
    int** co = (int**)malloc(m * sizeof(int*));
    for (int r = 0; r < m; r++) {
        co[r] = (int*)malloc(n * sizeof(int));
    }
    //co[0]=pacman ,co[1]=Blinky,co[2]=Pinky,co[3]=Inky,co[4]=Clyde ,,     co[][0]=x axis , co[][1]=y axis





    while (game_continue < 2)			                                             //continue the game 
    {
        selected_map = _select_map_menu_(map1, map2, map3);

        _installing_selected_map(map, map1, map2, map3, selected_map);

        mode = _select_mode_();

        _installing_ghost_and_pacman_coordinate_(map, co, score);

        _print_map_and_details(map, score, co);

        switch (mode)
        {                                                                                                           // mode easy game_continue
        case 1:
            for (int k = 0; score < 10; k++)
            {
                if ((co[0][0] == co[2][0] && co[0][1] == co[2][1]) || (co[0][0] == co[4][0] && co[0][1] == co[4][1]) || (co[0][0] == co[1][0] && co[0][1] == co[1][1]) || (co[0][0] == co[3][0] && co[0][1] == co[3][1]))
                {
                    break;
                }
                x = getch();                                                                                                  //recieve move key
                switch (x) {
                case 'a':_move_left_(map, co, &score, &t); break;                                                                                                   
                case 's':_move_down_(map, co, &score, &t); break;
                case 'd':_move_right_(map, co, &score, &t); break;                                                                                                 
                case 'w': _move_up_(map, co, &score, &t); break;	                                                                                               
                case up: _move_up_(map, co, &score, &t); break;                                                                                                   
                case down:_move_down_(map, co, &score, &t); break;
                case left:_move_left_(map, co, &score, &t); break;
                case right:_move_right_(map, co, &score, &t); break;
                }                                                                                                         //ghost move
                srand(time(0));
                while (t < 1)                  //move by pacman
                {
                    _Clyde_moves_random_(co, map);
                    _Pinky_moves_random_(co, map);
                    _Inky_moves_random_(co, map);
                    _Blinky_moves_random_(co, map);
                    t++;
                }
                _print_map_and_details(map, score, co);

            }
           _printing_finall_(bord,bakht,score , co);
           game_continue =_play_again_();
           score = 0;
            break;
        case 2:
            for (int k = 0; score < 10; k++)
            {
                if ((co[0][0] == co[2][0] && co[0][1] == co[2][1]) || (co[0][0] == co[4][0] && co[0][1] == co[4][1]) || (co[0][0] == co[1][0] && co[0][1] == co[1][1]) || (co[0][0] == co[3][0] && co[0][1] == co[3][1]))
                {
                    break;
                }
                x = getch();                                                                           //recieve move key
                switch (x) {
                case 'a':_move_right_(map, co, &score, &t); break;                                                                                                   //harkat pacman ba key a baray left
                case 's':_move_down_(map, co, &score, &t); break;
                case 'd':_move_left_(map, co, &score, &t); break;                                                                                                   //harkat pacman ba key d baray right
                case 'w': _move_up_(map, co, &score, &t); break;	                                                                                               //harkat pacman ba key w baray up
                case up: _move_up_(map, co, &score, &t); break;                                                                                                   //harkat pacman ba key arrow up
                case down:_move_down_(map, co, &score, &t); break;
                case left:_move_left_(map, co, &score, &t); break;
                case right:_move_right_(map, co, &score, &t); break;                                                                                                //harkat pacman ba key arrow right
                }
                srand(time(0));
                while (t < 1)
                {
                    q = rand() % 2;
                    switch (q)
                    {
                    case 0:
                        _Inky_move_AI(co, map);
                        _Pinky_move_AI(co, map);
                        _Clyde_moves_random_(co, map);
                        _Blinky_moves_random_(co, map);
                        break;
                    case 1:
                        _Clyde_move_AI(co, map);
                        _Blinky_move_AI(co, map);
                        _Pinky_moves_random_(co, map);
                        _Inky_moves_random_(co, map);
                        
                        break;
                    }

                    t++;
                }
                _print_map_and_details(map, score, co);
            }
            _printing_finall_(bord, bakht, score, co);
            game_continue = _play_again_();
            score = 0;
            break;

        case 3:
            for (int k = 0; score < 10; k++)
            {
                if ((co[0][0] == co[2][0] && co[0][1] == co[2][1]) || (co[0][0] == co[4][0] && co[0][1] == co[4][1]) || (co[0][0] == co[1][0] && co[0][1] == co[1][1]) || (co[0][0] == co[3][0] && co[0][1] == co[3][1]))
                {
                    break;
                }
                x = getch();                                     //recieve move key
                switch (x) {
                case 'a':_move_right_(map, co, &score, &t); break;                                                                                                  
                case 's':_move_down_(map, co, &score, &t); break;
                case 'd':_move_left_(map, co, &score, &t); break;                                                                                                   
                case 'w': _move_up_(map, co, &score, &t); break;	                                                                                              
                case up: _move_up_(map, co, &score, &t); break;                                                                                               
                case down:_move_down_(map, co, &score, &t); break;
                case left:_move_left_(map, co, &score, &t); break;
                case right:_move_right_(map, co, &score, &t); break;                                                                                                
                }
                while (t < 1)
                {
                    _Inky_move_AI(co, map);
                    _Pinky_move_AI(co,map);
                    _Clyde_move_AI(co, map);
                    _Blinky_move_AI(co, map);
                    t++;
                }

                _print_map_and_details(map, score, co);
            }
            _printing_finall_(bord, bakht, score, co);
            game_continue = _play_again_();
            score = 0;
            break;
        }
        }
        system("cls");                                                // Exit
        cout << "Good bye"<<endl<<"don't have good day" << endl << "have great day";
        getch();
        return 0;
    }

   

  